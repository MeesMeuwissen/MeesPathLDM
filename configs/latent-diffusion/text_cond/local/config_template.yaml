model:
  base_learning_rate: 2.5e-4
  target: ldm.models.diffusion.ddpm.LatentDiffusion
  params:
    #ckpt_path: Optionally add a checkpoint path of a pretrained model (Unet + Autoencoder) here. This will overwrite the ckpts specified for unet/autoencoder individually.
    linear_start: 0.0015
    linear_end: 0.0195
    num_timesteps_cond: 1
    log_every_t: 200
    timesteps: 1000
    first_stage_key: image
    cond_stage_key: caption
    image_size: 64
    channels: 3
    cond_stage_trainable: false
    conditioning_key: crossattn
    monitor: val/loss
    use_ema: False
    npz_path: FID_rat_overfit_20.npz # Path to FID file of dataset
    scheduler_config: # 1000 warmup steps
      target: ldm.lr_scheduler.LambdaLinearScheduler
      params:
        warm_up_steps: [ 100 ]
        cycle_lengths: [ 10000000000000 ] # incredibly large number to prevent corner cases
        f_start: [ 1.e-6 ]
        f_max: [ 1. ]
        f_min: [ 1. ]
    unet_config:
      target: ldm.modules.diffusionmodules.openaimodel.UNetModel
      params:
        #ckpt_path: Optionally add a checkpoint path of a pretrained Unet here.
        image_size: 256 # Can be anything, will be overwritten anyway but must be set to something
        in_channels: 3
        out_channels: 3
        model_channels: 192
        attention_resolutions: [8, 4, 2]
        num_res_blocks: 2
        channel_mult: [ 1,2,3,5 ]
        num_heads: 1
        use_spatial_transformer: True
        transformer_depth: 1
        context_dim: 512
        use_fp16: False # Half precision floats, default is float32
    first_stage_config:
      target: ldm.models.autoencoder.VQModelInterface
      params:
        #ckpt_path: Optionally add a checkpoint path of a pretrained autoencoder here.
        embed_dim: 3
        n_embed: 8192
        ddconfig:
          double_z: false
          z_channels: 3
          resolution: 256
          in_channels: 3
          out_ch: 3
          ch: 128
          ch_mult:
          - 1
          - 2
          - 4
          num_res_blocks: 2
          attn_resolutions: []
          dropout: 0.0
        lossconfig:
          target: torch.nn.Identity
    cond_stage_config:
      target: ldm.modules.encoders.modules.FrozenCLIPEmbedder
      params:
        version: "vinid/plip" # pathology CLIP model
        max_length: 154
data:
  already_downloaded: True # Only applies if running locally. If data is downloaded, you can speed things up.
  dataset_name: rat-tissue/patches #the name of the dataset as it is on S3, under patch_datasets
  target: main.DataModuleFromConfig
  params:
    batch_size: 4
    num_workers: 0 # 0  better for debugging
    wrap: false

    # Please provide your own dataloader, returning a dictionary with keys 'image' and 'caption'. Image should be tensor normalized to [-1,1]
    # Below works for me, but you won't have the same data
    train:
      target: ldm.data.text_cond.thesis_conditioning.OverfitOneBatch
      params:
        config:
          subsample: True
          root: rat-tissue/patches #start without / !
          csv: rat-tissue/patches.csv
          flip_p: 0.5
          size: 80 #Set nr of samples in the data set. If set very large, will default to the size of the full dataset.
          crop_size: 256  # size of the images
    validation:
      target: ldm.data.text_cond.thesis_conditioning.OverfitOneBatch
      params:
        config:
          root: rat-tissue/patches
          subsample: True
          csv: rat-tissue/patches.csv
          size: 4 # Dit geeft aan hoeveel samples er gemaakt moeten worden? Of hoeveel er worden gelezen?
          crop_size: 256

lightning:
  trainer:
    max_epochs: 10
    skip_validation: False # Determines if the validation loop (calculating FID values) is run or not.
    run_name: Debugging running with timer interval  # Name of the run as used by Neptune
    weights_only: False # Choose whether to only save model weights or also the optimizer state.
